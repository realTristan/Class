{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/classes/db_class.rs","byte_start":929,"byte_end":1192,"line_start":28,"line_end":31,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        sqlx::query!(","highlight_start":9,"highlight_end":22},{"text":"            \"INSERT INTO classes (owner_bearer, class_id, class_name, enable_whitelist) VALUES (?, ?, ?, ?, ?)\",","highlight_start":1,"highlight_end":113},{"text":"            \"822f3d5b9c91b570a4f1848c5d147b4709d2fb96\", \"e8bc5598c2f61d2c5e7f8ad1d447fd1ea6ad5020\", \"Advanced Functions\", 0, 0","highlight_start":1,"highlight_end":127},{"text":"        ).execute(&self.conn).await.unwrap();","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/classes/db_class.rs:28:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        sqlx::query!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"INSERT INTO classes (owner_bearer, class_id, class_name, enable_whitelist) VALUES (?, ?, ?, ?, ?)\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"822f3d5b9c91b570a4f1848c5d147b4709d2fb96\", \"e8bc5598c2f61d2c5e7f8ad1d447fd1ea6ad5020\", \"Advanced Functions\", 0, 0\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).execute(&self.conn).await.unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/classes/db_class.rs","byte_start":1282,"byte_end":1601,"line_start":34,"line_end":37,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        sqlx::query!(","highlight_start":9,"highlight_end":22},{"text":"            \"INSERT INTO announcements (class_id, announcement_id, author_name, title, description, attachment, date) VALUES (?, ?, ?, ?, ?, ?, ?)\",","highlight_start":1,"highlight_end":149},{"text":"            \"e8bc5598c2f61d2c5e7f8ad1d447fd1ea6ad5020\", \"announcement_id\", \"Tristan Simpson\", \"Test Announcement\", \"Hey guys!\", \"no_attachment\", 0","highlight_start":1,"highlight_end":147},{"text":"        ).execute(&self.conn).await.unwrap();","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/classes/db_class.rs:34:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   sqlx::query!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m35\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       \"INSERT INTO announcements (class_id, announcement_id, author_name, title, description, attachment, date) VALUES (?, ?, ?, ?, ?\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       \"e8bc5598c2f61d2c5e7f8ad1d447fd1ea6ad5020\", \"announcement_id\", \"Tristan Simpson\", \"Test Announcement\", \"Hey guys!\", \"no_attachm\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   ).execute(&self.conn).await.unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_______^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/classes/db_class.rs","byte_start":1696,"byte_end":1881,"line_start":40,"line_end":43,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        sqlx::query!(","highlight_start":9,"highlight_end":22},{"text":"            \"INSERT INTO whitelists (class_id, whitelisted_user) VALUES (?, ?)\",","highlight_start":1,"highlight_end":81},{"text":"            \"e8bc5598c2f61d2c5e7f8ad1d447fd1ea6ad5020\", \"test_whitelisted_user1\"","highlight_start":1,"highlight_end":81},{"text":"        ).execute(&self.conn).await.unwrap();","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/classes/db_class.rs:40:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        sqlx::query!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"INSERT INTO whitelists (class_id, whitelisted_user) VALUES (?, ?)\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"e8bc5598c2f61d2c5e7f8ad1d447fd1ea6ad5020\", \"test_whitelisted_user1\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).execute(&self.conn).await.unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/classes/db_class.rs","byte_start":1965,"byte_end":2249,"line_start":46,"line_end":49,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        sqlx::query!(","highlight_start":9,"highlight_end":22},{"text":"            \"INSERT INTO lessons (unit_id, title, description, video, work, work_solutions) VALUES (?, ?, ?, ?, ?, ?)\",","highlight_start":1,"highlight_end":120},{"text":"            \"random_unit_id\", \"test_lesson_title\", \"test_lesson_desc\", \"test_lesson_video\", \"test_lesson_work\", \"test_lesson_work_solutions\"","highlight_start":1,"highlight_end":141},{"text":"        ).execute(&self.conn).await.unwrap();","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/classes/db_class.rs:46:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        sqlx::query!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"INSERT INTO lessons (unit_id, title, description, video, work, work_solutions) VALUES (?, ?, ?, ?, ?, ?)\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"random_unit_id\", \"test_lesson_title\", \"test_lesson_desc\", \"test_lesson_video\", \"test_lesson_work\", \"test_lesson_work_solutions\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).execute(&self.conn).await.unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/classes/db_class.rs","byte_start":2331,"byte_end":2537,"line_start":52,"line_end":55,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        sqlx::query!(","highlight_start":9,"highlight_end":22},{"text":"            \"INSERT INTO units (class_id, unit_id, unit_name, locked) VALUES (?, ?, ?, ?)\",","highlight_start":1,"highlight_end":92},{"text":"            \"e8bc5598c2f61d2c5e7f8ad1d447fd1ea6ad5020\", \"random_unit_id\", \"Polynomials\", 0","highlight_start":1,"highlight_end":91},{"text":"        ).execute(&self.conn).await.unwrap();","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/classes/db_class.rs:52:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        sqlx::query!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"INSERT INTO units (class_id, unit_id, unit_name, locked) VALUES (?, ?, ?, ?)\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"e8bc5598c2f61d2c5e7f8ad1d447fd1ea6ad5020\", \"random_unit_id\", \"Polynomials\", 0\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).execute(&self.conn).await.unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/classes/db_class.rs","byte_start":2619,"byte_end":2823,"line_start":58,"line_end":61,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        sqlx::query!(","highlight_start":9,"highlight_end":22},{"text":"            \"INSERT INTO units (class_id, unit_id, unit_name, locked) VALUES (?, ?, ?, ?)\",","highlight_start":1,"highlight_end":92},{"text":"            \"e8bc5598c2f61d2c5e7f8ad1d447fd1ea6ad5020\", \"random_unit_id\", \"Functions\", 0","highlight_start":1,"highlight_end":89},{"text":"        ).execute(&self.conn).await.unwrap();","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/classes/db_class.rs:58:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        sqlx::query!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"INSERT INTO units (class_id, unit_id, unit_name, locked) VALUES (?, ?, ?, ?)\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"e8bc5598c2f61d2c5e7f8ad1d447fd1ea6ad5020\", \"random_unit_id\", \"Functions\", 0\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).execute(&self.conn).await.unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/classes/db_class.rs","byte_start":2905,"byte_end":3108,"line_start":64,"line_end":67,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        sqlx::query!(","highlight_start":9,"highlight_end":22},{"text":"            \"INSERT INTO units (class_id, unit_id, unit_name, locked) VALUES (?, ?, ?, ?)\",","highlight_start":1,"highlight_end":92},{"text":"            \"e8bc5598c2f61d2c5e7f8ad1d447fd1ea6ad5020\", \"random_unit_id\", \"Calculus\", 0","highlight_start":1,"highlight_end":88},{"text":"        ).execute(&self.conn).await.unwrap();","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/classes/db_class.rs:64:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        sqlx::query!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"INSERT INTO units (class_id, unit_id, unit_name, locked) VALUES (?, ?, ?, ?)\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"e8bc5598c2f61d2c5e7f8ad1d447fd1ea6ad5020\", \"random_unit_id\", \"Calculus\", 0\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).execute(&self.conn).await.unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/classes/db_class.rs","byte_start":3196,"byte_end":3471,"line_start":70,"line_end":73,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        sqlx::query!(","highlight_start":9,"highlight_end":22},{"text":"            \"INSERT INTO submissions (class_id, submission_id, submitter_bearer, submission_date, data) VALUES (?, ?, ?, ?, ?)\",","highlight_start":1,"highlight_end":129},{"text":"            \"e8bc5598c2f61d2c5e7f8ad1d447fd1ea6ad5020\", \"submission_id\", \"822f3d5b9c91b570a4f1848c5d147b4709d2fb96\", 0, \"\"","highlight_start":1,"highlight_end":123},{"text":"        ).execute(&self.conn).await.unwrap();","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/classes/db_class.rs:70:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        sqlx::query!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"INSERT INTO submissions (class_id, submission_id, submitter_bearer, submission_date, data) VALUES (?, ?, ?, ?, ?)\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"e8bc5598c2f61d2c5e7f8ad1d447fd1ea6ad5020\", \"submission_id\", \"822f3d5b9c91b570a4f1848c5d147b4709d2fb96\", 0, \"\"\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m73\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).execute(&self.conn).await.unwrap();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/classes/db_class.rs","byte_start":4069,"byte_end":4269,"line_start":88,"line_end":91,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query!(","highlight_start":17,"highlight_end":30},{"text":"            \"INSERT INTO classes (owner_bearer, owner_id, class_id, class_name, enable_whitelist) VALUES (?, ?, ?, ?, ?)\",","highlight_start":1,"highlight_end":123},{"text":"            bearer, owner_id, class_id, class_name, 0","highlight_start":1,"highlight_end":54},{"text":"        ).execute(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/classes/db_class.rs:88:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m88\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"INSERT INTO classes (owner_bearer, owner_id, class_id, class_name, enable_whitelist) VALUES (?, ?, ?, ?, ?)\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            bearer, owner_id, class_id, class_name, 0\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).execute(&self.conn).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/classes/db_class.rs","byte_start":4776,"byte_end":4862,"line_start":104,"line_end":106,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query!(","highlight_start":17,"highlight_end":30},{"text":"            \"SELECT * FROM classes WHERE class_id=?\", class_id","highlight_start":1,"highlight_end":63},{"text":"        ).fetch_one(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/classes/db_class.rs:104:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query!(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"SELECT * FROM classes WHERE class_id=?\", class_id\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).fetch_one(&self.conn).await;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25937,"byte_end":26030,"line_start":561,"line_end":561,"column_start":9,"column_end":102,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25937,"byte_end":26030,"line_start":561,"line_end":561,"column_start":9,"column_end":102,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/classes/db_class.rs","byte_start":7476,"byte_end":7609,"line_start":163,"line_end":165,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query_as!(","highlight_start":17,"highlight_end":33},{"text":"            Class, \"SELECT class_name, owner_id, enable_whitelist FROM classes WHERE class_id=?\", class_id","highlight_start":1,"highlight_end":107},{"text":"        ).fetch_one(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query_as!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25715,"byte_end":26040,"line_start":556,"line_end":563,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query_as (","highlight_start":1,"highlight_end":24},{"text":"    ($out_struct:path, $query:expr) => ( {","highlight_start":1,"highlight_end":43},{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query)","highlight_start":1,"highlight_end":82},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($out_struct:path, $query:expr, $($args:tt)*) => ( {","highlight_start":1,"highlight_end":57},{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":102},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/classes/db_class.rs:163:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query_as!(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m164\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Class, \"SELECT class_name, owner_id, enable_whitelist FROM classes WHERE class_id=?\", class_id\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).fetch_one(&self.conn).await;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/users/db_users.rs","byte_start":1552,"byte_end":1751,"line_start":46,"line_end":49,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query!(","highlight_start":17,"highlight_end":30},{"text":"            \"INSERT INTO users (bearer, user_id, user_name, email, registration_date) VALUES (?, ?, ?, ?, ?)\",","highlight_start":1,"highlight_end":111},{"text":"            bearer, user_id, user_name, email, registration_date","highlight_start":1,"highlight_end":65},{"text":"        ).execute(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/users/db_users.rs:46:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"INSERT INTO users (bearer, user_id, user_name, email, registration_date) VALUES (?, ?, ?, ?, ?)\",\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            bearer, user_id, user_name, email, registration_date\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).execute(&self.conn).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/users/db_users.rs","byte_start":2278,"byte_end":2358,"line_start":62,"line_end":64,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query!(","highlight_start":17,"highlight_end":30},{"text":"            \"SELECT * FROM users WHERE bearer=?\", bearer","highlight_start":1,"highlight_end":57},{"text":"        ).fetch_one(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/users/db_users.rs:62:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"SELECT * FROM users WHERE bearer=?\", bearer\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).fetch_one(&self.conn).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25937,"byte_end":26030,"line_start":561,"line_end":561,"column_start":9,"column_end":102,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25937,"byte_end":26030,"line_start":561,"line_end":561,"column_start":9,"column_end":102,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/users/db_users.rs","byte_start":2795,"byte_end":2886,"line_start":75,"line_end":77,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query_as!(","highlight_start":17,"highlight_end":33},{"text":"            User, \"SELECT * FROM users WHERE user_id=?\", user_id","highlight_start":1,"highlight_end":65},{"text":"        ).fetch_one(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query_as!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25715,"byte_end":26040,"line_start":556,"line_end":563,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query_as (","highlight_start":1,"highlight_end":24},{"text":"    ($out_struct:path, $query:expr) => ( {","highlight_start":1,"highlight_end":43},{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query)","highlight_start":1,"highlight_end":82},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($out_struct:path, $query:expr, $($args:tt)*) => ( {","highlight_start":1,"highlight_end":57},{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":102},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/users/db_users.rs:75:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query_as!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            User, \"SELECT * FROM users WHERE user_id=?\", user_id\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).fetch_one(&self.conn).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/users/db_users.rs","byte_start":3326,"byte_end":3424,"line_start":89,"line_end":91,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query!(\"UPDATE users SET user_name=? WHERE bearer=?\",","highlight_start":17,"highlight_end":76},{"text":"            new_name, bearer","highlight_start":1,"highlight_end":29},{"text":"        ).execute(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/users/db_users.rs:89:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query!(\"UPDATE users SET user_name=? WHERE bearer=?\",\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            new_name, bearer\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).execute(&self.conn).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25937,"byte_end":26030,"line_start":561,"line_end":561,"column_start":9,"column_end":102,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25937,"byte_end":26030,"line_start":561,"line_end":561,"column_start":9,"column_end":102,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/whitelist/db_whitelist.rs","byte_start":590,"byte_end":708,"line_start":15,"line_end":17,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query_as!(","highlight_start":17,"highlight_end":33},{"text":"            Whitelist, \"SELECT whitelisted_user FROM whitelists WHERE class_id=?\", class_id","highlight_start":1,"highlight_end":92},{"text":"        ).fetch_all(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query_as!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25715,"byte_end":26040,"line_start":556,"line_end":563,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query_as (","highlight_start":1,"highlight_end":24},{"text":"    ($out_struct:path, $query:expr) => ( {","highlight_start":1,"highlight_end":43},{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query)","highlight_start":1,"highlight_end":82},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($out_struct:path, $query:expr, $($args:tt)*) => ( {","highlight_start":1,"highlight_end":57},{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":102},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/whitelist/db_whitelist.rs:15:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query_as!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Whitelist, \"SELECT whitelisted_user FROM whitelists WHERE class_id=?\", class_id\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).fetch_all(&self.conn).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/whitelist/db_whitelist.rs","byte_start":1248,"byte_end":1404,"line_start":31,"line_end":34,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query!(","highlight_start":17,"highlight_end":30},{"text":"            \"DELETE FROM whitelists WHERE owner_bearer=? AND class_id=? AND whitelisted_user=?\", ","highlight_start":1,"highlight_end":98},{"text":"            bearer, class_id, user","highlight_start":1,"highlight_end":35},{"text":"        ).execute(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/whitelist/db_whitelist.rs:31:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"DELETE FROM whitelists WHERE owner_bearer=? AND class_id=? AND whitelisted_user=?\", \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            bearer, class_id, user\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).execute(&self.conn).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/whitelist/db_whitelist.rs","byte_start":2066,"byte_end":2223,"line_start":50,"line_end":53,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query!(","highlight_start":17,"highlight_end":30},{"text":"            \"INSERT INTO whitelists (owner_bearer, class_id, whitelisted_user) VALUES (?, ?, ?)\", ","highlight_start":1,"highlight_end":99},{"text":"            bearer, class_id, user","highlight_start":1,"highlight_end":35},{"text":"        ).execute(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/whitelist/db_whitelist.rs:50:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"INSERT INTO whitelists (owner_bearer, class_id, whitelisted_user) VALUES (?, ?, ?)\", \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m52\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            bearer, class_id, user\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).execute(&self.conn).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/submissions/db_submissions.rs","byte_start":2320,"byte_end":2539,"line_start":59,"line_end":62,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query!(","highlight_start":17,"highlight_end":30},{"text":"            \"INSERT INTO submissions (class_id, submission_id, submitter_bearer, submission_date, data) VALUES (?, ?, ?, ?, ?)\", ","highlight_start":1,"highlight_end":130},{"text":"            class_id, submission_id, submitter_bearer, date, data","highlight_start":1,"highlight_end":66},{"text":"        ).execute(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/submissions/db_submissions.rs:59:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"INSERT INTO submissions (class_id, submission_id, submitter_bearer, submission_date, data) VALUES (?, ?, ?, ?, ?)\", \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m61\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            class_id, submission_id, submitter_bearer, date, data\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).execute(&self.conn).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/submissions/db_submissions.rs","byte_start":3134,"byte_end":3234,"line_start":76,"line_end":78,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query!(","highlight_start":17,"highlight_end":30},{"text":"            \"SELECT * FROM submissions WHERE submission_id=?\", submission_id","highlight_start":1,"highlight_end":77},{"text":"        ).fetch_one(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/submissions/db_submissions.rs:76:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m77\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"SELECT * FROM submissions WHERE submission_id=?\", submission_id\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m78\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).fetch_one(&self.conn).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/submissions/db_submissions.rs","byte_start":3797,"byte_end":3949,"line_start":92,"line_end":95,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query!(","highlight_start":17,"highlight_end":30},{"text":"            \"DELETE FROM submissions WHERE submission_id=? AND submitter_bearer=?\", ","highlight_start":1,"highlight_end":85},{"text":"            submission_id, submitter_bearer","highlight_start":1,"highlight_end":44},{"text":"        ).execute(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/submissions/db_submissions.rs:92:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"DELETE FROM submissions WHERE submission_id=? AND submitter_bearer=?\", \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            submission_id, submitter_bearer\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m95\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).execute(&self.conn).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25937,"byte_end":26030,"line_start":561,"line_end":561,"column_start":9,"column_end":102,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25937,"byte_end":26030,"line_start":561,"line_end":561,"column_start":9,"column_end":102,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/submissions/db_submissions.rs","byte_start":4697,"byte_end":4868,"line_start":111,"line_end":114,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query_as!(","highlight_start":17,"highlight_end":33},{"text":"            Submission, \"SELECT submitter_bearer, submission_id, submission_date, data FROM submissions WHERE class_id=?\", ","highlight_start":1,"highlight_end":124},{"text":"            class_id","highlight_start":1,"highlight_end":21},{"text":"        ).fetch_all(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query_as!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25715,"byte_end":26040,"line_start":556,"line_end":563,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query_as (","highlight_start":1,"highlight_end":24},{"text":"    ($out_struct:path, $query:expr) => ( {","highlight_start":1,"highlight_end":43},{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query)","highlight_start":1,"highlight_end":82},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($out_struct:path, $query:expr, $($args:tt)*) => ( {","highlight_start":1,"highlight_end":57},{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":102},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/submissions/db_submissions.rs:111:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query_as!(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Submission, \"SELECT submitter_bearer, submission_id, submission_date, data FROM submissions WHERE class_id=?\", \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            class_id\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).fetch_all(&self.conn).await;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25937,"byte_end":26030,"line_start":561,"line_end":561,"column_start":9,"column_end":102,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25937,"byte_end":26030,"line_start":561,"line_end":561,"column_start":9,"column_end":102,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/submissions/db_submissions.rs","byte_start":5767,"byte_end":5998,"line_start":131,"line_end":135,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query_as!(","highlight_start":17,"highlight_end":33},{"text":"            Submission, \"SELECT submitter_bearer, submission_id, submission_date, data ","highlight_start":1,"highlight_end":88},{"text":"                            FROM submissions WHERE class_id=? AND submitter_bearer=?\", ","highlight_start":1,"highlight_end":88},{"text":"            class_id, bearer","highlight_start":1,"highlight_end":29},{"text":"        ).fetch_all(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query_as!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25715,"byte_end":26040,"line_start":556,"line_end":563,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query_as (","highlight_start":1,"highlight_end":24},{"text":"    ($out_struct:path, $query:expr) => ( {","highlight_start":1,"highlight_end":43},{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query)","highlight_start":1,"highlight_end":82},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($out_struct:path, $query:expr, $($args:tt)*) => ( {","highlight_start":1,"highlight_end":57},{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":102},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/submissions/db_submissions.rs:131:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query_as!(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Submission, \"SELECT submitter_bearer, submission_id, submission_date, data \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                            FROM submissions WHERE class_id=? AND submitter_bearer=?\", \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            class_id, bearer\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m135\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).fetch_all(&self.conn).await;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25937,"byte_end":26030,"line_start":561,"line_end":561,"column_start":9,"column_end":102,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25937,"byte_end":26030,"line_start":561,"line_end":561,"column_start":9,"column_end":102,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/units/db_unit.rs","byte_start":1311,"byte_end":1429,"line_start":43,"line_end":45,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query_as!(","highlight_start":17,"highlight_end":33},{"text":"            Unit, \"SELECT unit_id, unit_name, locked FROM units WHERE class_id=?\", class_id","highlight_start":1,"highlight_end":92},{"text":"        ).fetch_all(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query_as!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25715,"byte_end":26040,"line_start":556,"line_end":563,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query_as (","highlight_start":1,"highlight_end":24},{"text":"    ($out_struct:path, $query:expr) => ( {","highlight_start":1,"highlight_end":43},{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query)","highlight_start":1,"highlight_end":82},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($out_struct:path, $query:expr, $($args:tt)*) => ( {","highlight_start":1,"highlight_end":57},{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":102},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/units/db_unit.rs:43:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query_as!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Unit, \"SELECT unit_id, unit_name, locked FROM units WHERE class_id=?\", class_id\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).fetch_all(&self.conn).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/units/db_unit.rs","byte_start":2136,"byte_end":2321,"line_start":62,"line_end":65,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query!(","highlight_start":17,"highlight_end":30},{"text":"            \"INSERT INTO units (owner_bearer, class_id, unit_id, unit_name, locked) VALUES (?, ?, ?, ?, ?)\", ","highlight_start":1,"highlight_end":110},{"text":"            bearer, class_id, unit_id, unit_name, 0","highlight_start":1,"highlight_end":52},{"text":"        ).execute(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/units/db_unit.rs:62:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m63\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"INSERT INTO units (owner_bearer, class_id, unit_id, unit_name, locked) VALUES (?, ?, ?, ?, ?)\", \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            bearer, class_id, unit_id, unit_name, 0\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).execute(&self.conn).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/units/db_unit.rs","byte_start":2874,"byte_end":2956,"line_start":79,"line_end":81,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query!(","highlight_start":17,"highlight_end":30},{"text":"            \"SELECT * FROM units WHERE unit_id=?\", unit_id","highlight_start":1,"highlight_end":59},{"text":"        ).fetch_one(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/units/db_unit.rs:79:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"SELECT * FROM units WHERE unit_id=?\", unit_id\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).fetch_one(&self.conn).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/units/db_unit.rs","byte_start":3365,"byte_end":3485,"line_start":90,"line_end":93,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query!(","highlight_start":17,"highlight_end":30},{"text":"            \"DELETE FROM units WHERE unit_id=? AND owner_bearer=?\", ","highlight_start":1,"highlight_end":69},{"text":"            unit_id, bearer","highlight_start":1,"highlight_end":28},{"text":"        ).execute(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/units/db_unit.rs:90:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m91\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"DELETE FROM units WHERE unit_id=? AND owner_bearer=?\", \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            unit_id, bearer\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).execute(&self.conn).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25937,"byte_end":26030,"line_start":561,"line_end":561,"column_start":9,"column_end":102,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25937,"byte_end":26030,"line_start":561,"line_end":561,"column_start":9,"column_end":102,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/units/db_unit.rs","byte_start":5502,"byte_end":5643,"line_start":140,"line_end":142,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query_as!(","highlight_start":17,"highlight_end":33},{"text":"            Lesson, \"SELECT title, description, video, work, work_solutions FROM lessons WHERE unit_id=?\", unit_id","highlight_start":1,"highlight_end":115},{"text":"        ).fetch_all(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query_as!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25715,"byte_end":26040,"line_start":556,"line_end":563,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query_as (","highlight_start":1,"highlight_end":24},{"text":"    ($out_struct:path, $query:expr) => ( {","highlight_start":1,"highlight_end":43},{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query)","highlight_start":1,"highlight_end":82},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($out_struct:path, $query:expr, $($args:tt)*) => ( {","highlight_start":1,"highlight_end":57},{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":102},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/units/db_unit.rs:140:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query_as!(\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Lesson, \"SELECT title, description, video, work, work_solutions FROM lessons WHERE unit_id=?\", unit_id\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).fetch_all(&self.conn).await;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/announcements/db_announces.rs","byte_start":1592,"byte_end":1899,"line_start":39,"line_end":42,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query!(","highlight_start":17,"highlight_end":30},{"text":"            \"INSERT INTO announcements (owner_bearer, class_id, announcement_id, author_name, title, description, attachment, date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\", ","highlight_start":1,"highlight_end":167},{"text":"            bearer, class_id, announcement_id, data.author_name, data.title, data.description, data.attachment, date","highlight_start":1,"highlight_end":117},{"text":"        ).execute(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/announcements/db_announces.rs:39:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let r = sqlx::query!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_______________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       \"INSERT INTO announcements (owner_bearer, class_id, announcement_id, author_name, title, description, attachment, date) VALUES \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m       bearer, class_id, announcement_id, data.author_name, data.title, data.description, data.attachment, date\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   ).execute(&self.conn).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_______^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/announcements/db_announces.rs","byte_start":2453,"byte_end":2559,"line_start":54,"line_end":56,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query!(","highlight_start":17,"highlight_end":30},{"text":"            \"SELECT * FROM announcements WHERE announcement_id=?\", announcement_id","highlight_start":1,"highlight_end":83},{"text":"        ).fetch_one(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/announcements/db_announces.rs:54:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"SELECT * FROM announcements WHERE announcement_id=?\", announcement_id\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).fetch_one(&self.conn).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":16102,"byte_end":16173,"line_start":319,"line_end":319,"column_start":9,"column_end":80,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/announcements/db_announces.rs","byte_start":3072,"byte_end":3216,"line_start":69,"line_end":72,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query!(","highlight_start":17,"highlight_end":30},{"text":"            \"DELETE FROM announcements WHERE announcement_id=? AND owner_bearer=?\", ","highlight_start":1,"highlight_end":85},{"text":"            announcement_id, bearer","highlight_start":1,"highlight_end":36},{"text":"        ).execute(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":15194,"byte_end":16183,"line_start":305,"line_end":321,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query (","highlight_start":1,"highlight_end":21},{"text":"    // in Rust 1.45 we can now invoke proc macros in expression position","highlight_start":1,"highlight_end":73},{"text":"    ($query:expr) => ({","highlight_start":1,"highlight_end":24},{"text":"        $crate::sqlx_macros::expand_query!(source = $query)","highlight_start":1,"highlight_end":60},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    // RFC: this semantically should be `$($args:expr),*` (with `$(,)?` to allow trailing comma)","highlight_start":1,"highlight_end":97},{"text":"    // but that doesn't work in 1.45 because `expr` fragments get wrapped in a way that changes","highlight_start":1,"highlight_end":96},{"text":"    // their hygiene, which is fixed in 1.46 so this is technically just a temp. workaround.","highlight_start":1,"highlight_end":93},{"text":"    // My question is: do we care?","highlight_start":1,"highlight_end":35},{"text":"    // I was hoping using the `expr` fragment might aid code completion but it doesn't in my","highlight_start":1,"highlight_end":93},{"text":"    // experience, at least not with IntelliJ-Rust at the time of writing (version 0.3.126.3220-201)","highlight_start":1,"highlight_end":101},{"text":"    // so really the only benefit is making the macros _slightly_ self-documenting, but it's","highlight_start":1,"highlight_end":93},{"text":"    // not like it makes them magically understandable at-a-glance.","highlight_start":1,"highlight_end":68},{"text":"    ($query:expr, $($args:tt)*) => ({","highlight_start":1,"highlight_end":38},{"text":"        $crate::sqlx_macros::expand_query!(source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":80},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/announcements/db_announces.rs:69:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m69\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m70\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            \"DELETE FROM announcements WHERE announcement_id=? AND owner_bearer=?\", \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            announcement_id, bearer\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).execute(&self.conn).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"`DATABASE_URL` must be set to use query macros","code":null,"level":"error","spans":[{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25937,"byte_end":26030,"line_start":561,"line_end":561,"column_start":9,"column_end":102,"is_primary":true,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25937,"byte_end":26030,"line_start":561,"line_end":561,"column_start":9,"column_end":102,"is_primary":false,"text":[{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":9,"highlight_end":102}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/lib/endpoints/announcements/db_announces.rs","byte_start":3771,"byte_end":3922,"line_start":85,"line_end":87,"column_start":17,"column_end":10,"is_primary":false,"text":[{"text":"        let r = sqlx::query_as!(","highlight_start":17,"highlight_end":33},{"text":"            Announcement, \"SELECT author_name, title, description, attachment FROM announcements WHERE class_id=?\", class_id","highlight_start":1,"highlight_end":125},{"text":"        ).fetch_all(&self.conn).await;","highlight_start":1,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"sqlx::query_as!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-0.6.2/src/macros/mod.rs","byte_start":25715,"byte_end":26040,"line_start":556,"line_end":563,"column_start":1,"column_end":3,"is_primary":false,"text":[{"text":"macro_rules! query_as (","highlight_start":1,"highlight_end":24},{"text":"    ($out_struct:path, $query:expr) => ( {","highlight_start":1,"highlight_end":43},{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query)","highlight_start":1,"highlight_end":82},{"text":"    });","highlight_start":1,"highlight_end":8},{"text":"    ($out_struct:path, $query:expr, $($args:tt)*) => ( {","highlight_start":1,"highlight_end":57},{"text":"        $crate::sqlx_macros::expand_query!(record = $out_struct, source = $query, args = [$($args)*])","highlight_start":1,"highlight_end":102},{"text":"    })","highlight_start":1,"highlight_end":7},{"text":");","highlight_start":1,"highlight_end":3}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"$crate::sqlx_macros::expand_query!","def_site_span":{"file_name":"/Users/tristan/.cargo/registry/src/github.com-1ecc6299db9ec823/sqlx-macros-0.6.2/src/lib.rs","byte_start":654,"byte_end":708,"line_start":31,"line_end":31,"column_start":1,"column_end":55,"is_primary":false,"text":[{"text":"pub fn expand_query(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: `DATABASE_URL` must be set to use query macros\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib/endpoints/announcements/db_announces.rs:85:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m85\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let r = sqlx::query_as!(\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Announcement, \"SELECT author_name, title, description, attachment FROM announcements WHERE class_id=?\", class_id\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ).fetch_all(&self.conn).await;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_________^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `$crate::sqlx_macros::expand_query` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 32 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 32 previous errors\u001b[0m\n\n"}
